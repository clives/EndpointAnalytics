

spray.can.server {
  request-timeout = 1s
}


analyticdb = {
  url = "jdbc:mysql://localhost:3306/analyticdb?useSSL=false"
  user = "fcuseranalytic"
  password = "change0me"
  maxPoolSize = 100
}


akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      receive = off
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
    }

    default-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 10.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 100
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }

    blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 2
      }
    }

    bounded-mailbox {
      mailbox-type = "akka.dispatch.BoundedMailbox"
      mailbox-capacity = 500
      mailbox-push-timeout-time = 10 milliseconds
    }

  }

  http {
    server {
      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = akka-http-analytic/${akka.http.version}

      # "PREVIEW" features that are not yet fully production ready.
      # These flags can can change or be removed between patch releases.
      preview {
        # ONLY WORKS WITH `bindAndHandleAsync` (currently)
        #
        # If this setting is enabled AND the akka-http2-support is found
        # on the classpath the usual Http().bind... method calls will bind
        # using HTTP/2. Please note that you must configure HTTPS while doing so.
        enable-http2 = off
      }

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = 60 s

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # Make sure this timeout is smaller than the idle-timeout, otherwise,
      # the idle-timeout will kick in first and reset the TCP connection
      # without a response.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      request-timeout = 20 s

      # The time period within which the TCP binding process must be completed.
      bind-timeout = 1s

      # Default port to bind HTTP server to when no port was explicitly given.
      default-http-port = 80

      # Default port to bind HTTPS server to when no port was explicitly given.
      default-https-port = 443

      # The time period the HTTP server implementation will keep a connection open after
      # all data has been delivered to the network layer. This setting is similar to the SO_LINGER socket option
      # but does not only include the OS-level socket but also covers the Akka IO / Akka Streams network stack.
      # The setting is an extra precaution that prevents clients from keeping open a connection that is
      # already considered completed from the server side.
      #
      # If the network level buffers (including the Akka Stream / Akka IO networking stack buffers)
      # contains more data than can be transferred to the client in the given time when the server-side considers
      # to be finished with this connection, the client may encounter a connection reset.
      #
      # Set to 'infinite' to disable automatic connection closure (which will risk to leak connections).
      linger-timeout = 1 min

      # The maximum number of concurrently accepted connections when using the
      # `Http().bindAndHandle` methods.
      #
      # This setting doesn't apply to the `Http().bind` method which will still
      # deliver an unlimited backpressured stream of incoming connections.
      #
      # Note, that this setting limits the number of the connections on a best-effort basis.
      # It does *not* strictly guarantee that the number of established TCP connections will never
      # exceed the limit (but it will be approximately correct) because connection termination happens
      # asynchronously. It also does *not* guarantee that the number of concurrently active handler
      # flow materializations will never exceed the limit for the reason that it is impossible to reliably
      # detect when a materialization has ended.
      max-connections = 1024

      # The maximum number of requests that are accepted (and dispatched to
      # the application) on one single connection before the first request
      # has to be completed.
      # Incoming requests that would cause the pipelining limit to be exceeded
      # are not read from the connections socket so as to build up "back-pressure"
      # to the client via TCP flow control.
      # A setting of 1 disables HTTP pipelining, since only one request per
      # connection can be "open" (i.e. being processed by the application) at any
      # time. Set to higher values to enable HTTP pipelining.
      # This value must be > 0 and <= 1024.
      pipelining-limit = 16

      # Enables/disables the addition of a `Remote-Address` header
      # holding the clients (remote) IP address.
      remote-address-header = off

      # Enables/disables the addition of a `Raw-Request-URI` header holding the
      # original raw request URI as the client has sent it.
      raw-request-uri-header = off

      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = on

      # Enables/disables the returning of more detailed error messages to
      # the client in the error response.
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs.
      # Note that akka-http will always produce log messages containing the full
      # error details.
      verbose-error-messages = off

      # The initial size of the buffer to render the response headers in.
      # Can be used for fine-tuning response rendering performance but probably
      # doesn't have to be fiddled with in most applications.
      response-header-size-hint = 512

      # The requested maximum length of the queue of incoming connections.
      # If the server is busy and the backlog is full the OS will start dropping
      # SYN-packets and connection attempts may fail. Note, that the backlog
      # size is usually only a maximum size hint for the OS and the OS can
      # restrict the number further based on global limits.
      backlog = 100

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # Socket options to set for the listening socket. If a setting is left
      # undefined, it will use whatever the default on the system is.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }

      # Modify to tweak parsing settings on the server-side only.
      parsing {
        # no overrides by default, see `akka.http.parsing` for default values
      }

      # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
      # server for debugging reasons.
      #
      # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
      #
      # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
      # specify the number of bytes to log per chunk of data (the actual chunking depends
      # on implementation details and networking conditions and should be treated as
      # arbitrary).
      #
      # For logging on the client side, see akka.http.client.log-unencrypted-network-bytes.
      #
      # `off` : no log messages are produced
      # Int   : determines how many bytes should be logged per data chunk
      log-unencrypted-network-bytes = off

      http2 {
        # The maximum number of bytes to receive from a request entity in a single chunk.
        #
        # The reasoning to limit that amount (instead of delivering all buffered data for a stream) is that
        # the amount of data in the internal buffers will drive backpressure and flow control on the HTTP/2 level. Bigger
        # chunks would mean that the user-level entity reader will have to buffer all that data if it cannot read it in one
        # go. The implementation would not be able to backpressure further data in that case because it does not know about
        # this user-level buffer.
        request-entity-chunk-size = 65536 b

        # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per connection. Free
        # space in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it
        # isn't read fast enough.
        #
        # When there is no backpressure, this amount will limit the amount of in-flight data. It might need to be increased
        # for high bandwidth-delay-product connections.
        #
        # There is a relation between the `incoming-connection-level-buffer-size` and the `incoming-stream-level-buffer-size`:
        # If incoming-connection-level-buffer-size < incoming-stream-level-buffer-size * number_of_streams, then
        # head-of-line blocking is possible between different streams on the same connection.
        incoming-connection-level-buffer-size = 10 MB

        # The number of request data bytes the HTTP/2 implementation is allowed to buffer internally per stream. Free space
        # in this buffer is communicated to the peer using HTTP/2 flow-control messages to backpressure data if it isn't
        # read fast enough.
        #
        # When there is no backpressure, this amount will limit the amount of in-flight data per stream. It might need to
        # be increased for high bandwidth-delay-product connections.
        incoming-stream-level-buffer-size = 512kB
      }
    }
  }
}
